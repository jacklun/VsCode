// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebEditor.DataAccessLayer;

namespace WebEditor.Migrations
{
    [DbContext(typeof(Dal))]
    [Migration("20181122081433_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("WebEditor.Models.Article", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleCategoryid");

                    b.Property<int?>("UserDetialid");

                    b.Property<string>("description")
                        .HasMaxLength(10000);

                    b.Property<string>("pname")
                        .HasMaxLength(30);

                    b.Property<int>("priority");

                    b.HasKey("id");

                    b.HasIndex("ArticleCategoryid");

                    b.HasIndex("UserDetialid");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WebEditor.Models.ArticleCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("aname")
                        .HasMaxLength(30);

                    b.HasKey("id");

                    b.ToTable("ArticleCategorys");
                });

            modelBuilder.Entity("WebEditor.Models.ArticleReferenceImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Articleid");

                    b.Property<int?>("UserImageid");

                    b.Property<string>("url")
                        .HasMaxLength(300);

                    b.HasKey("id");

                    b.HasIndex("Articleid");

                    b.HasIndex("UserImageid");

                    b.ToTable("ArticleReferenceImages");
                });

            modelBuilder.Entity("WebEditor.Models.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserDetialId");

                    b.Property<string>("cname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("mainbusiness")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("UserDetialId")
                        .IsUnique();

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("WebEditor.Models.Industry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Companyid");

                    b.Property<string>("iname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("Companyid");

                    b.ToTable("Industrys");
                });

            modelBuilder.Entity("WebEditor.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductCategoryid");

                    b.Property<int?>("UserDetialid");

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<decimal>("discount");

                    b.Property<string>("image_url")
                        .HasMaxLength(200);

                    b.Property<string>("pname")
                        .HasMaxLength(30);

                    b.Property<decimal>("price");

                    b.HasKey("id");

                    b.HasIndex("ProductCategoryid");

                    b.HasIndex("UserDetialid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebEditor.Models.ProductCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("tname")
                        .HasMaxLength(10);

                    b.HasKey("id");

                    b.ToTable("ProductCategorys");
                });

            modelBuilder.Entity("WebEditor.Models.UserArticleCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleCategoryid");

                    b.Property<int?>("UserDetialid");

                    b.HasKey("id");

                    b.HasIndex("ArticleCategoryid");

                    b.HasIndex("UserDetialid");

                    b.ToTable("UserArticleCategroys");
                });

            modelBuilder.Entity("WebEditor.Models.UserBase", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("openid")
                        .HasMaxLength(50);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("phone")
                        .HasMaxLength(20);

                    b.Property<string>("uname")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("id");

                    b.ToTable("UserBases");
                });

            modelBuilder.Entity("WebEditor.Models.UserDetial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserBaseId");

                    b.Property<string>("nickname")
                        .HasMaxLength(10);

                    b.Property<string>("openid")
                        .HasMaxLength(50);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("phone")
                        .HasMaxLength(20);

                    b.Property<string>("photo")
                        .HasMaxLength(50);

                    b.Property<string>("signatureline")
                        .HasMaxLength(200);

                    b.Property<string>("uname")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("id");

                    b.HasIndex("UserBaseId")
                        .IsUnique();

                    b.ToTable("UserDetials");
                });

            modelBuilder.Entity("WebEditor.Models.UserImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("UserDetialid");

                    b.Property<string>("url")
                        .HasMaxLength(300);

                    b.HasKey("id");

                    b.HasIndex("UserDetialid");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("WebEditor.Models.UserProductCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductCategoryid");

                    b.Property<int?>("UserDetialid");

                    b.HasKey("id");

                    b.HasIndex("ProductCategoryid");

                    b.HasIndex("UserDetialid");

                    b.ToTable("UserProductCategorys");
                });

            modelBuilder.Entity("WebEditor.Models.Article", b =>
                {
                    b.HasOne("WebEditor.Models.ArticleCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryid");

                    b.HasOne("WebEditor.Models.UserDetial")
                        .WithMany("Articles")
                        .HasForeignKey("UserDetialid");
                });

            modelBuilder.Entity("WebEditor.Models.ArticleReferenceImage", b =>
                {
                    b.HasOne("WebEditor.Models.Article")
                        .WithMany("ArticleReferenceImages")
                        .HasForeignKey("Articleid");

                    b.HasOne("WebEditor.Models.UserImage")
                        .WithMany("ArticleReferenceImage")
                        .HasForeignKey("UserImageid");
                });

            modelBuilder.Entity("WebEditor.Models.Company", b =>
                {
                    b.HasOne("WebEditor.Models.UserDetial", "userdetial")
                        .WithOne("company")
                        .HasForeignKey("WebEditor.Models.Company", "UserDetialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebEditor.Models.Industry", b =>
                {
                    b.HasOne("WebEditor.Models.Company")
                        .WithMany("Industrys")
                        .HasForeignKey("Companyid");
                });

            modelBuilder.Entity("WebEditor.Models.Product", b =>
                {
                    b.HasOne("WebEditor.Models.ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryid");

                    b.HasOne("WebEditor.Models.UserDetial")
                        .WithMany("Products")
                        .HasForeignKey("UserDetialid");
                });

            modelBuilder.Entity("WebEditor.Models.UserArticleCategory", b =>
                {
                    b.HasOne("WebEditor.Models.ArticleCategory")
                        .WithMany("UserArticleCategorys")
                        .HasForeignKey("ArticleCategoryid");

                    b.HasOne("WebEditor.Models.UserDetial")
                        .WithMany("UserArticleCategorys")
                        .HasForeignKey("UserDetialid");
                });

            modelBuilder.Entity("WebEditor.Models.UserDetial", b =>
                {
                    b.HasOne("WebEditor.Models.UserBase", "userbase")
                        .WithOne("userdetial")
                        .HasForeignKey("WebEditor.Models.UserDetial", "UserBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebEditor.Models.UserImage", b =>
                {
                    b.HasOne("WebEditor.Models.UserDetial")
                        .WithMany("UserImages")
                        .HasForeignKey("UserDetialid");
                });

            modelBuilder.Entity("WebEditor.Models.UserProductCategory", b =>
                {
                    b.HasOne("WebEditor.Models.ProductCategory")
                        .WithMany("UserProductCategorys")
                        .HasForeignKey("ProductCategoryid");

                    b.HasOne("WebEditor.Models.UserDetial")
                        .WithMany("UserProductCategorys")
                        .HasForeignKey("UserDetialid");
                });
#pragma warning restore 612, 618
        }
    }
}
